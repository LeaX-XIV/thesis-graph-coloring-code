#version 460

struct Node {
    int color;
	int neighbours;
	int next_neighbours;
};

//const int first, const int last, const int c, const int* Ao, const int* Ac, const int* randoms, int* colors, bool *finished

layout(set = 0, binding = 0) buffer InAoBuffer {
    int Ao[];
};

layout(set = 0, binding = 1) buffer InAcBuffer {
    int Ac[];
};

layout(set = 0, binding = 2) buffer InRandomBuffer {
    int randoms[];
};

layout(set = 0, binding = 3) buffer InOutColors {
    int colors[];
};

layout(set = 0, binding = 4) buffer OutFinished {
    int finished[];
};

layout(push_constant) uniform PushConstants {
    int xSize;
    int first;
    int last;
    int current_color;
} push;

bool color_jpl_ignore_neighbor(in int c, in uint i, in int j, in int jc)
{
    return ((jc != -1) && (jc != c) && (jc != c + 1)) || (i == j);
}

bool color_jpl_assign_color(in int c, in uint index, in bool localmax, in bool localmin)
{
    if(localmin) {
        colors[index] = c + 1;
    }
    if(localmax) {
        colors[index] = c;
    }
    return localmax || localmin;
}

void main()
{
    for(uint index = gl_GlobalInvocationID.y * push.xSize + gl_GlobalInvocationID.x; index < push.last - push.first; index += push.xSize) {
        if (colors[index] != -1) break;
        int color = push.current_color;
        bool localmax = true;
        bool localmin = true;
        color *= 2;
        for(int k = Ao[index]; k < Ao[index + 1]; k++) {
            int j = Ac[k - Ao[0]] - push.first;
            bool ignore = color_jpl_ignore_neighbor(color, index, j, colors[j]);
            if(j < 0 || (j >= push.last - push.first) || ignore) continue;
            int ir = randoms[(index + (color << 1)) % (push.last - push.first)];
            int jr = randoms[(j + (color << 1)) % (push.last - push.first)];
            localmax = localmax && (ir > jr);
            localmin = localmin && (ir < jr);
        }
        bool assigned_color = color_jpl_assign_color(color, index, localmax, localmin);
        if(!assigned_color) {
            finished[0] = 0;
        }
    }
}
